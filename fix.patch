diff --git a/app/main.py b/app/main.py
--- a/app/main.py
+++ b/app/main.py
@@ -1,20 +1,22 @@
 from fastapi import FastAPI, Request
 from fastapi.middleware.cors import CORSMiddleware
 from fastapi.staticfiles import StaticFiles
 
 from .config import FRONTEND_ORIGINS
 from .db import users_col
 from .deps import get_user_by_id
 from .security import parse_session_cookie
 
 from .routers.pages import router as pages_router
 from .routers.auth_routes import router as auth_router
 from .routers.rewards import router as rewards_router
 from .routers.admin_intake import router as admin_router
 from .routers.deva import router as deva_router
+from .routers.intake import router as intake_router
 
 app = FastAPI()
 
 app.include_router(health.router)
 app.mount("/static", StaticFiles(directory="app/static"), name="static")
 
 # CORS
 app.add_middleware(
     CORSMiddleware,
     allow_origins=FRONTEND_ORIGINS,
     allow_credentials=True,
     allow_methods=["*"],
     allow_headers=["*"],
 )
 
 # Attach user to request.state on every request
 @app.middleware("http")
 async def inject_user(request: Request, call_next):
     uid = None
     sid = request.cookies.get("sid")
     if sid:
         uid = parse_session_cookie(sid)
     if not uid:
         uid = request.cookies.get("uid")
 
     request.state.user = await get_user_by_id(uid) if uid else None
     return await call_next(request)
 
 # Routers
 app.include_router(pages_router)
 app.include_router(auth_router)
 app.include_router(rewards_router)
 app.include_router(admin_router)
 app.include_router(deva_router)
+app.include_router(intake_router)
diff --git a/app/routers/intake.py b/app/routers/intake.py
new file mode 100644
--- /dev/null
+++ b/app/routers/intake.py
@@ -0,0 +1,48 @@
+# app/routers/intake.py
+"""Endpoints for the intake wizard used to create a new plan."""
+from typing import Any, Dict
+
+from bson import ObjectId
+from fastapi import APIRouter, Depends, HTTPException
+from pydantic import BaseModel
+
+from ..db import intake_col, users_col
+from ..deps import require_uid_cookie
+
+router = APIRouter()
+
+
+@router.get("/api/intake/questions")
+async def get_intake_questions(
+    _uid: str = Depends(require_uid_cookie),
+) -> Dict[str, Any]:
+    """Return all intake questions ordered by their id.
+
+    The client side wizard uses these questions to render the interview.
+    """
+    cur = intake_col.find({}, {"_id": 0}).sort("id", 1)
+    questions = [q async for q in cur]
+    return {"questions": questions}
+
+
+class IntakeAnswers(BaseModel):
+    """Payload for saving intake answers."""
+
+    answers: Dict[str, Any]
+
+
+@router.post("/api/intake/answers")
+async def save_intake_answers(
+    payload: IntakeAnswers, uid: str = Depends(require_uid_cookie)
+) -> Dict[str, Any]:
+    """Store the provided answers on the user document.
+
+    If the user document does not yet exist, raise an error.
+    """
+    oid = ObjectId(uid)
+    res = await users_col.update_one(
+        {"_id": oid}, {"$set": {"intake_answers": payload.answers}}, upsert=False
+    )
+    if res.matched_count == 0:
+        raise HTTPException(status_code=404, detail="user not found")
+    return {"ok": True}
diff --git a/app/static/js/intake.js b/app/static/js/intake.js
new file mode 100644
--- /dev/null
+++ b/app/static/js/intake.js
@@ -0,0 +1,67 @@
+// app/static/js/intake.js
+// Simple client-side wizard for answering intake questions sequentially.
+let questions = [];
+let index = 0;
+const answers = {};
+
+async function loadQuestions() {
+  try {
+    const res = await fetch('/api/intake/questions');
+    if (!res.ok) throw new Error('Failed to load');
+    const data = await res.json();
+    questions = data.questions || [];
+    if (questions.length === 0) {
+      document.getElementById('question').textContent = 'No questions available.';
+    } else {
+      renderQuestion();
+    }
+  } catch (err) {
+    document.getElementById('question').textContent = 'Error loading questions.';
+  }
+}
+
+function renderQuestion() {
+  const q = questions[index];
+  const container = document.getElementById('question');
+  container.innerHTML = '';
+  const label = document.createElement('p');
+  label.textContent = q.text;
+  container.appendChild(label);
+  let input;
+  if (q.type === 'single-select' && q.options) {
+    input = document.createElement('select');
+    q.options.forEach((o) => {
+      const opt = document.createElement('option');
+      opt.value = o.value || o.text;
+      opt.textContent = o.text;
+      input.appendChild(opt);
+    });
+  } else {
+    input = document.createElement('input');
+    input.type = q.type === 'number' ? 'number' : 'text';
+  }
+  input.id = 'answer';
+  container.appendChild(input);
+}
+
+async function next() {
+  const q = questions[index];
+  const val = document.getElementById('answer').value;
+  answers[q.variable_name] = val;
+  index += 1;
+  if (index < questions.length) {
+    renderQuestion();
+  } else {
+    await fetch('/api/intake/answers', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ answers }),
+    });
+    window.location.href = '/dashboard';
+  }
+}
+
+document.addEventListener('DOMContentLoaded', () => {
+  const btn = document.getElementById('nextBtn');
+  if (btn) btn.addEventListener('click', next);
+  loadQuestions();
+});
diff --git a/tests/test_intake.py b/tests/test_intake.py
new file mode 100644
--- /dev/null
+++ b/tests/test_intake.py
@@ -0,0 +1,9 @@
+from fastapi.testclient import TestClient
+
+from app.main import app
+
+
+def test_intake_requires_authentication():
+    client = TestClient(app)
+    res = client.get("/api/intake/questions")
+    assert res.status_code == 403
